# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Qgis2threejs Algorithm
        begin                : 2018-11-06
        copyright            : (C) 2018 Minoru Akagi
        email                : akaginch@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/

import os
import qgis
from qgis.core import (QgsCoordinateTransform,
                       QgsGeometry,
                       QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterField,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterNumber,
                       QgsRectangle)

from .conf import DEBUG_MODE
from .export import ThreeJSExporter, ImageExporter, ModelExporter
from .q3dviewercontroller import Q3DViewerController
from .qgis2threejstools import logMessage
from .rotatedrect import RotatedRect


class AlgorithmBase(QgsProcessingAlgorithm):

  Exporter = ThreeJSExporter

  INPUT = "INPUT"
  TITLE_FIELD = "TITLE"
  SETTINGS = "SETTINGS"
  OUTPUT = "OUTPUT"

  def createInstance(self):
    if DEBUG_MODE:
      logMessage("createInstance(): {}".format(self.__class__.__name__))
    return self.__class__()

  def flags(self):
    return super().flags() | QgsProcessingAlgorithm.FlagNoThreading

  #def tags(self):
  #  return []

  def tr(self, string):
    return string
    #return QCoreApplication.translate("Qgis2threejsAlg", string)

  def initAlgorithm(self, config):
    if DEBUG_MODE:
      logMessage("initAlgorithm(): {}".format(self.__class__.__name__))

    self.addParameter(
      QgsProcessingParameterFolderDestination(
        self.OUTPUT,
        self.tr("Output Directory")
      )
    )

    self.addParameter(
      QgsProcessingParameterFeatureSource(
        self.INPUT,
        self.tr('Coverage layer'),
        [QgsProcessing.TypeVectorAnyGeometry]
      )
    )

    self.addParameter(
      QgsProcessingParameterField(self.TITLE_FIELD,
        self.tr('Title field'),
        None,
        self.INPUT,
        QgsProcessingParameterField.Any
      )
    )

    param = QgsProcessingParameterFile(self.SETTINGS,
      self.tr('Export settings file (.qto3settings)'),
      extension="qto3settings",
      optional=True
    )
    param.setFlags(param.flags() | param.FlagAdvanced)
    self.addParameter(param)

  def prepareAlgorithm(self, parameters, context, feedback):
    source = self.parameterAsSource(parameters, self.INPUT, context)
    settings_path = self.parameterAsString(parameters, self.SETTINGS, context)

    self.transform = QgsCoordinateTransform(source.sourceCrs(),
                                            context.project().crs(),
                                            context.project())

    qgis_iface = qgis.utils.plugins["Qgis2threejs"].iface
    self.controller = Q3DViewerController(qgis_iface)
    self.controller.settings.loadSettingsFromFile(settings_path or None)

    self.exporter = self.Exporter(self.controller.settings)
    return True

  def processAlgorithm(self, parameters, context, feedback):
    if DEBUG_MODE:
      logMessage("processAlgorithm(): {}".format(self.__class__.__name__))

    source = self.parameterAsSource(parameters, self.INPUT, context)
    title_field = self.parameterAsString(parameters, self.TITLE_FIELD, context)
    out_dir = self.parameterAsString(parameters, self.OUTPUT, context)

    rotation = 0

    mapSettings = self.controller.settings.mapSettings
    baseExtent = self.controller.settings.baseExtent
    half_width = baseExtent.width() / 2
    half_height = baseExtent.height() / 2

    total = source.featureCount()
    for current, feature in enumerate(source.getFeatures()):
      if feedback.isCanceled():
        break

      title = feature.attribute(title_field)
      feedback.setProgressText("({}/{}) Exporting {}...".format(current + 1, total, title))

      # extent
      geometry = QgsGeometry(feature.geometry())
      geometry.transform(self.transform)
      center= geometry.centroid().asPoint()

      if rotation:
        RotatedRect(center, baseExtent.width(), baseExtent.height(), rotation).toMapSettings(mapSettings)
      else:
        rect = QgsRectangle(center.x() - half_width, center.y() - half_height,
                            center.x() + half_width, center.y() + half_height)
        mapSettings.setExtent(rect)

      self.controller.settings.setMapSettings(mapSettings)

      self.export(title, out_dir, feedback)

      feedback.setProgress(int(current / total * 100))

    return {}

  def export(self, title):
    pass


class ExportAlgorithm(AlgorithmBase):

  TEMPLATE = "TEMPLATE"

  def initAlgorithm(self, config):
    super().initAlgorithm(config)

    templates = ["3DViewer.html", "3DViewer(dat-gui).html", "Mobile.html"]
    self.addParameter(
      QgsProcessingParameterEnum(
        self.TEMPLATE,
        self.tr("Template"),
        templates,
        allowMultiple=False
      )
    )

  def name(self):
    return 'exportweb'

  def displayName(self):
    return self.tr("Export as Web Page")

  def export(self, title, out_dir, feedback):
    # scene title
    filename = "{}.html".format(title)
    filepath = os.path.join(out_dir, filename)
    self.controller.settings.setOutputFilename(filepath)

    err_msg = self.controller.settings.checkValidity()
    if err_msg:
      feedback.reportError("Invalid settings: " + err_msg)
      return False

    # export
    self.exporter.export()
    return True


class ExportImageAlgorithm(AlgorithmBase):

  Exporter = ImageExporter
  WIDTH = "WIDTH"
  HEIGHT = "HEIGHT"

  def initAlgorithm(self, config):
    super().initAlgorithm(config)

    self.addParameter(
      QgsProcessingParameterNumber(
        self.WIDTH,
        self.tr("Image width"),
        defaultValue=2480,
        minValue=1)
    )

    self.addParameter(
      QgsProcessingParameterNumber(
        self.HEIGHT,
        self.tr("Image height"),
        defaultValue=1748,
        minValue=1)
    )

  def name(self):
    return 'exportimage'

  def displayName(self):
    return self.tr("Export as Image")

  def prepareAlgorithm(self, parameters, context, feedback):
    super().prepareAlgorithm(parameters, context, feedback)

    width = self.parameterAsInt(parameters, self.WIDTH, context)
    height = self.parameterAsInt(parameters, self.HEIGHT, context)

    self.exporter.initWebPage(self.controller, width, height)
    return True

  def postProcessAlgorithm(self, context, feedback):
    self.exporter.destroyWebPage()
    return {}

  def export(self, title, out_dir, feedback):
    # image path
    filename = "{}.png".format(title)
    filepath = os.path.join(out_dir, filename)

    err_msg = self.controller.settings.checkValidity()
    if err_msg:
      feedback.reportError("Invalid settings: " + err_msg)
      return False

    # export
    self.exporter.export(filepath)

    return True


class ExportModelAlgorithm(AlgorithmBase):

  Exporter = ModelExporter

  def initAlgorithm(self, config):
    super().initAlgorithm(config)

  def name(self):
    return 'exportmodel'

  def displayName(self):
    return self.tr("Export as 3D Model")

  def prepareAlgorithm(self, parameters, context, feedback):
    super().prepareAlgorithm(parameters, context, feedback)

    self.modelType = "gltf"

    self.exporter.initWebPage(self.controller, 500, 500)
    return True

  def postProcessAlgorithm(self, context, feedback):
    self.exporter.destroyWebPage()
    return {}

  def export(self, title, out_dir, feedback):
    # model path
    filename = "{}.{}".format(title, self.modelType)
    filepath = os.path.join(out_dir, filename)

    err_msg = self.controller.settings.checkValidity()
    if err_msg:
      feedback.reportError("Invalid settings: " + err_msg)
      return False

    # export
    self.exporter.export(filepath)

    return True
